const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

window.addEventListener("resize", () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
});

const keys = {
  left: false,
  right: false,
  up: false,
  down: false
};

window.addEventListener("keydown", (e) => {
  const key = e.key.toLowerCase();
  if (key === "a" || key === "—Ñ") keys.left = true;
  if (key === "d" || key === "–≤") keys.right = true;
  if (key === "w" || key === "—Ü") keys.up = true;
  if (key === "s" || key === "—ã") keys.down = true;

  if (key === "p") {
    activateAutopilot(); // –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "p"
  }
});

window.addEventListener("keyup", (e) => {
  const key = e.key.toLowerCase();
  if (key === "a" || key === "—Ñ") keys.left = false;
  if (key === "d" || key === "–≤") keys.right = false;
  if (key === "w" || key === "—Ü") keys.up = false;
  if (key === "s" || key === "—ã") keys.down = false;
});





//TODO:   –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ê–≤—Ç–æ–ø–∏–ª–æ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "P" - –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 —Å–µ–∫—É–Ω–¥, –∫/–¥ 60 —Å–µ–∫
//TODO:   –í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã —Ç–∞–º –±—É–¥—É—Ç –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ –ê–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ 
//TODO:   –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã—Ö —Å–ø—Å–æ–±–Ω–æ—Å—Ç–µ–π —Ç–∏–ø–∞ –≤—ã–±—Ä–æ—Å –±–æ–º–±—ã –≤–≤–µ—Ä—Ö(–æ–Ω–∞ –¥–µ–ª–∞–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏) –∏–ª–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è 2 –ø–æ–º–æ—à–Ω–∏–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ç—Ä–æ–µ –≤—Ä–µ–º—è
//TODO:   –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö –≤—Ä–∞–≥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–µ–ª—è—é—Ç, –ø—Ä–µ–ø—è–¥—Å—Ç–≤–∏—è –∏ –ë–æ—Å—Å–∞



const playerImage = new Image();
playerImage.src = "images/SpaceShip_1.png";

const enemyImage = new Image();
enemyImage.src = "images/enemy_1.png";

const backgroundImage = new Image();
backgroundImage.src = "images/fon_2.png";


const bullets = [];
const enemies = [];
const explosions = [];
let coins = 0;
let killedEnemies = 0;
let waveCountdown = null;
let countdownValue = 3;
let showWaveText = false;
let waveStartTime = 0;
let waveStarted = false;

let isShooting = false;
let shootInterval = null;
let fireRate = 200;  // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –≤—ã—Å—Ç—Ä–µ–ª–∞–º–∏
let extraCannons = false; // —Ñ–ª–∞–≥, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—à–∫–∏
let extraCannons_2 = false;
let extraCannons_3 = false;
let speedLevel = 1; // 1..3
let fireLevel = 1;  // 1..3
// –ú–∞—Å—Å–∏–≤—ã —Å —Ü–µ–Ω–∞–º–∏: [ —É—Ä–æ–≤–µ–Ω—å1‚Üí2, —É—Ä–æ–≤–µ–Ω—å2‚Üí3, —É—Ä–æ–≤–µ–Ω—å3‚Üí(–º–∞–∫—Å) ]
// –ò–Ω–¥–µ–∫—Å 0 –æ–∑–Ω–∞—á–∞–µ—Ç –∞–ø–≥—Ä–µ–π–¥ —Å 1–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞ 2–π, –∏–Ω–¥–µ–∫—Å 1 ‚Äî —Å 2–≥–æ –Ω–∞ 3–π
const speedCosts = [20, 30];
const fireCosts = [30, 40];
let isAutopilot = false;
let autopilotEndTime = 0; // –∫–æ–≥–¥–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è



coins+=10000



// ================== –ö–õ–ê–°–° –ò–ì–†–û–ö ===================
class Player {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.width = 90;
    this.height = 90;
    this.speed = 13;
    this.level = 1;
    this.image = new Image();
    this.image.src = "images/SpaceShip_1.png";
  }

  upgrade() {
    if (this.level === 1 && killedEnemies >= 10) {
      this.level = 2;
      this.image.src = "images/SpaceShip_2.png";
      this.width = 200;
      this.height = 100;
    }
    else if(this.level === 2 && killedEnemies >= 40){
      this.level = 3;
      this.image.src = "images/SpaceShip_3.png";
      this.width = 220;
      this.height = 220;
    }
  }

  draw() {
    ctx.drawImage(this.image, this.x, this.y, this.width, this.height);
  }
}

const player = new Player(canvas.width / 2, canvas.height - 100);

// ================== –ö–õ–ê–°–° –í–†–ê–ì ===================
class Enemy {
  constructor(x, y, hp = 1, reward = 1, speed = 3) {
    this.x = x;
    this.y = y;
    this.width = 75;  // —Ç–≤–æ–π —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    this.height = 75;
    this.hp = hp;
    this.maxHp = hp;  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP (–¥–ª—è –ø–æ–ª–æ—Å–∫–∏)
    this.reward = reward; // –Ω–∞–≥—Ä–∞–¥–∞
    this.speed = speed;
    this.color = "red";
  }
  

  update() {
    this.y += this.speed;
  }

  draw() {
    // –í—Ä–∞–≥ ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –≤—Ä–∞–≥–∞
    ctx.drawImage(enemyImage, this.x, this.y, this.width, this.height);
  
    // –ü–æ–ª–æ—Å–∫–∞ HP —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    const barWidth = this.width - 20; // —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 20 –ø–∏–∫—Å–µ–ª–µ–π (–ø–æ 10 —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
    const hpWidth = barWidth * (this.hp / this.maxHp); 
  
    ctx.fillStyle = "red";
    ctx.fillRect(this.x + 10, this.y - 6, barWidth, 4); // —Ñ–æ–Ω –ø–æ–ª–æ—Å–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π)
  
    ctx.fillStyle = "lime";
    ctx.fillRect(this.x + 10, this.y - 6, hpWidth, 4);  // —Ç–µ–∫—É—â–∏–π HP (–∑–µ–ª–µ–Ω—ã–π)
  }
  
  

  isOffscreen() {
    return this.y > canvas.height;
  }
}

// ================== –ö–õ–ê–°–° –í–û–õ–ù–ê ===================
class Wave {
  constructor(enemyCount, spawnInterval, enemiesPerSpawn, enemyConfig, name = "–í–æ–ª–Ω–∞") {
    this.enemyCount = enemyCount;
    this.spawnInterval = spawnInterval;
    this.enemiesPerSpawn = enemiesPerSpawn;
    this.enemyConfig = enemyConfig;
    this.spawned = 0;
    this.timer = 0;
    this.finished = false;
    this.name = name;
  }

  update(deltaTime) {
    if (this.spawned >= this.enemyCount) {
      this.finished = true;
      return;
    }

    this.timer += deltaTime;
    if (this.timer >= this.spawnInterval && this.spawned < this.enemyCount) {
      for (let i = 0; i < this.enemiesPerSpawn && this.spawned < this.enemyCount; i++) {
        const x = Math.random() * (canvas.width - 50);
        enemies.push(new Enemy(x, -50, this.enemyConfig.hp, this.enemyConfig.reward, this.enemyConfig.speed));
        this.spawned++;
      }
      this.timer = 0;
    }
  }
}

// ================== –í–û–õ–ù–´ ===================
let waves = [];
let currentWaveIndex = 0;

function setupWaves() {
  waves.push(new Wave(10, 1500, 1, { hp: 1, reward: 1, speed: 3 }, "–ù–∞—á–∞–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞"));
  waves.push(new Wave(30, 2000, 2, { hp: 2, reward: 2, speed: 4 }, "–í–æ–ª–Ω–∞ 2"));
  waves.push(new Wave(70, 1000, 1, { hp: 3, reward: 5, speed: 4 }, "–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞"));
}
setupWaves();



// ================== –ü–ê–ù–ï–õ–¨ –£–õ–£–ß–®–ï–ù–ò–ô ===================


// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabId) {
  const tabs = document.querySelectorAll('.tab');
  tabs.forEach(tab => tab.classList.remove('active'));

  const activeTab = document.getElementById(tabId);
  if (activeTab) activeTab.classList.add('active');
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
function updateUpgradeUI() {
  // 1) –°–∫–æ—Ä–æ—Å—Ç—å
  document.getElementById("speedLevelText").textContent = speedLevel;
  if (speedLevel >= 3) {
    document.getElementById("upgradeSpeedBtn").disabled = true;
    document.getElementById("upgradeSpeedBtn").textContent = "–ú–∞–∫—Å";
  } else {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const cost = speedCosts[speedLevel - 1]; // –µ—Å–ª–∏ speedLevel=1, –±–µ—Ä—ë–º cost[0]
    document.getElementById("upgradeSpeedBtn").disabled = false;
    document.getElementById("upgradeSpeedBtn").textContent = `–ö—É–ø–∏—Ç—å –∑–∞ ${cost} ü™ô`;
  }

  // 2) –°–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª—å–Ω–æ—Å—Ç—å
  document.getElementById("fireLevelText").textContent = fireLevel;
  if (fireLevel >= 3) {
    document.getElementById("upgradeFireBtn").disabled = true;
    document.getElementById("upgradeFireBtn").textContent = "–ú–∞–∫—Å";
  } else {
    const cost = fireCosts[fireLevel - 1];
    document.getElementById("upgradeFireBtn").disabled = false;
    document.getElementById("upgradeFireBtn").textContent = `–ö—É–ø–∏—Ç—å –∑–∞ ${cost} ü™ô`;
  }
}

function upgradeSpeed() {
  if (speedLevel < 3) {
    // –¶–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ speedLevel => speedLevel+1
    const cost = speedCosts[speedLevel - 1]; 
    if (coins >= cost) {
      coins -= cost; 
      speedLevel++; // –ø–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ +5 –∑–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–ø—Ä–∏–º–µ—Ä)
      player.speed += 5;
      // –û–±–Ω–æ–≤–∏–º UI
      updateUpgradeUI();
    }
  }
}

function upgradeFire() {
  if (fireLevel < 3) {
    const cost = fireCosts[fireLevel - 1];
    if (coins >= cost) {
      coins -= cost;
      fireLevel++; 
      // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å—Ç—Ä–µ–ª—å–±—ã –Ω–∞ 30 –º—Å –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å (–ø—Ä–∏–º–µ—Ä)
      fireRate = Math.max(50, fireRate - 30);

      // –ï—Å–ª–∏ –ª–∫–º –∑–∞–∂–∞—Ç–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (isShooting) {
        clearInterval(shootInterval);
        shootInterval = setInterval(shoot, fireRate);
      }
      // –û–±–Ω–æ–≤–∏–º UI
      updateUpgradeUI();
    }
  }
}

function addCannons() {
  // –¶–µ–Ω–∞ 50 –º–æ–Ω–µ—Ç
  // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞–Ω–æ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞–µ–º
  if (coins >= 50 && !extraCannons) {
    coins -= 50;
    extraCannons = true;
    console.log("–î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—à–∫–∏!");
  }
  else if(coins >= 50 && !extraCannons_2){
    coins -= 50;
    extraCannons_2 = true;
    console.log("–î–æ–±–∞–≤–ª–µ–Ω—ã –±–æ–∫–æ–≤—ã–µ –ø—É—à–∫–∏!");
  }
  else if(coins >= 50 && !extraCannons_3){
    coins -= 50;
    extraCannons_3 = true;
    console.log("–î–æ–±–∞–≤–ª–µ–Ω—ã –µ—â—ë –±–æ–∫–æ–≤—ã–µ –ø—É—à–∫–∏!");
  }
}





// ================== –°–¢–†–ï–õ–¨–ë–ê ===================
canvas.addEventListener("mousedown", (e) => {
  if (e.button === 0) {
    isShooting = true;
    if (!shootInterval) {
      shoot(); // –≤—ã—Å—Ç—Ä–µ–ª —Å—Ä–∞–∑—É
      shootInterval = setInterval(shoot, fireRate); // –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ä–∞–∑ –≤ fireRate –º—Å
    }
  }

  if (e.button === 2) {
    const angles = [-15, -7.5, 0, 7.5, 15];
    angles.forEach(angle => {
      const rad = angle * Math.PI / 180;
      bullets.push({
        x: player.x + player.width / 2 - 2.5,
        y: player.y,
        width: 7,
        height: 14,
        speed: 14,
        dx: Math.sin(rad) * 14,
        dy: -Math.cos(rad) * 14,
        color: "orange"
      });
    });
  }
});

canvas.addEventListener("mouseup", (e) => {
  if (e.button === 0) {
    isShooting = false;
    clearInterval(shootInterval);
    shootInterval = null;
  }
});

canvas.addEventListener("contextmenu", (e) => {
  e.preventDefault();
});

function shoot() {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–≤–æ—é –ª–æ–≥–∏–∫—É —É—Ä–æ–≤–Ω–µ–π:
  if (player.level === 1) {
    // 1 —É—Ä. ‚Äî –æ–¥–Ω–∞ –ø—É–ª—è
    bullets.push({
      x: player.x + player.width / 2 - 2.5,
      y: player.y,
      width: 5,
      height: 10,
      speed: 7,
      dx: 0,
      dy: -15,
      color: "yellow"
    });
  } 
  else if (player.level === 2) {
    // 2 —É—Ä. ‚Äî –¥–≤–æ–π–Ω–æ–π –≤—ã—Å—Ç—Ä–µ–ª (–ª–µ–≤–∞—è/–ø—Ä–∞–≤–∞—è –ø—É—à–∫–∞)
    bullets.push(
      {
        x: player.x + player.width/3,
        y: player.y + 30,
        width: 5,
        height: 10,
        speed: 7,
        dx: 0,
        dy: -15,
        color: "yellow"
      },
      {
        x: player.x + player.width/3*2,
        y: player.y + 30,
        width: 5,
        height: 10,
        speed: 7,
        dx: 0,
        dy: -15,
        color: "yellow"
      }
    );
  }
  else if (player.level === 3) {
    // 3 —É—Ä. ‚Äî —Ç—Ä–æ–π–Ω–æ–π –≤—ã—Å—Ç—Ä–µ–ª
    bullets.push(
      {
        x: player.x + player.width/3,
        y: player.y + 100,
        width: 5,
        height: 10,
        speed: 9,
        dx: 0,
        dy: -15,
        color: "red"
      },
      {
        x: player.x + player.width/3*2,
        y: player.y + 100,
        width: 5,
        height: 10,
        speed: 9,
        dx: 0,
        dy: -15,
        color: "red"
      },
      {
        x: player.x + player.width/2,
        y: player.y + 20,
        width: 7,
        height: 15,
        speed: 8,
        dx: 0,
        dy: -15,
        color: "red"
      }
    );
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º extraCannons ‚Äî –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∫—É–ø–∏–ª ¬´–î–æ–±–∞–≤–∏—Ç—å –ø—É—à–∫–∏¬ª
  if (extraCannons) {
    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 2 –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ø—É–ª–∏ (–∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—à—å)
    bullets.push({
      x: player.x + (player.width/2 - 30),
      y: player.y + 150,
      width: 5,
      height: 10,
      speed: 7,
      dx: -4,     // —Å–ª–µ–≥–∫–∞ –≤–ª–µ–≤–æ
      dy: -14,
      color: "yellow"
    });
    bullets.push({
      x: player.x + (player.width/2 + 30),
      y: player.y + 150,
      width: 5,
      height: 10,
      speed: 7,
      dx: 4,      // —Å–ª–µ–≥–∫–∞ –≤–ø—Ä–∞–≤–æ
      dy: -14,
      color: "yellow"
    });
  }

  if (extraCannons_2) {
    // –î–æ–±–∞–≤–ª—è–µ–º 2 –±–æ–∫–æ–≤—ã–µ –ø—É—à–∫–∏
    bullets.push({
      x: player.x + player.width/2,
      y: player.y + player.height/3*2,
      width: 10,
      height: 5,
      speed: 2,
      dx: -90,     // —É–≥–æ–ª 90
      dy: 0,
      color: "yellow"
    });
    bullets.push({
      x: player.x + player.width/2,
      y: player.y + player.height/3*2,
      width: 10,
      height: 5,
      speed: 2,
      dx: 90,      // —É–≥–æ–ª 90
      dy: 0,
      color: "yellow"
    });
  }

  if (extraCannons_3) {
    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ 2 –±–æ–∫–æ–≤—ã–µ –ø—É—à–∫–∏
    bullets.push({
      x: player.x + player.width/2,
      y: player.y + player.height/3*2 + 20,
      width: 10,
      height: 5,
      speed: 5,
      dx: -90,     // —É–≥–æ–ª 90
      dy: 0,
      color: "yellow"
    });
    bullets.push({
      x: player.x + player.width/2,
      y: player.y + player.height/3*2 + 20,
      width: 10,
      height: 5,
      speed: 5,
      dx: 90,      // —É–≥–æ–ª 90
      dy: 0,
      color: "yellow"
    });
  }
}


// ================== –û–ë–ù–û–í–õ–ï–ù–ò–ï ===================
function update() {
  player.upgrade();  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –ø—Ä–∏ 50 –º–æ–Ω–µ—Ç–∞—Ö
  
  if (keys.left && player.x > 0) player.x -= player.speed;
  if (keys.right && player.x + player.width < canvas.width) player.x += player.speed;
  if (keys.up && player.y > 0) player.y -= player.speed;
  if (keys.down && player.y + player.height < canvas.height) player.y += player.speed;

  bullets.forEach((bullet, bIndex) => {
    bullet.x += bullet.dx || 0;
    bullet.y += bullet.dy || -bullet.speed;

    if (
      bullet.y + bullet.height < 0 ||
      bullet.x + bullet.width < 0 ||
      bullet.x > canvas.width
    ) {
      bullets.splice(bIndex, 1);
      return;
    }

    enemies.forEach((enemy, eIndex) => {
      const hit =
        bullet.x < enemy.x + enemy.width &&
        bullet.x + bullet.width > enemy.x &&
        bullet.y < enemy.y + enemy.height &&
        bullet.y + bullet.height > enemy.y;

      if (hit) {
        enemy.hp -= 1;
        bullets.splice(bIndex, 1);
        if (enemy.hp <= 0) {
          explosions.push({
            x: enemy.x + enemy.width / 2,
            y: enemy.y + enemy.height / 2,
            radius: 0,
            maxRadius: 20,
            alpha: 1
          });

          coins += enemy.reward;
          killedEnemies++;
          enemies.splice(eIndex, 1);
        }
      }
    });
  });

  enemies.forEach((enemy, index) => {
    enemy.update();
    if (enemy.isOffscreen()) {
      enemies.splice(index, 1);
    }
  });

  explosions.forEach((exp, index) => {
    exp.radius += 2;
    exp.alpha -= 0.05;
    if (exp.alpha <= 0) {
      explosions.splice(index, 1);
    }
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –ø–µ—Ä–µ–¥ –≤–æ–ª–Ω–æ–π
  if (
    currentWaveIndex > 0 &&
    !waveCountdown &&
    !waveStarted &&
    enemies.length === 0 &&
    !showWaveText &&
    waves[currentWaveIndex]
  ) {    waveCountdown = setInterval(() => {
      countdownValue--;
      if (countdownValue <= 0) {
        clearInterval(waveCountdown);
        waveCountdown = null;
        countdownValue = 3;
        showWaveText = true;
        waveStarted = true;
        waveStartTime = Date.now();
      }
    }, 1000);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ª–Ω—É 1 —Å–µ–∫—É–Ω–¥—É, –∑–∞—Ç–µ–º —É–±–∏—Ä–∞–µ–º
  if (showWaveText && Date.now() - waveStartTime > 1000) {
    showWaveText = false;
  }


  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω—ã
  if (waves[currentWaveIndex]) {
    if (!waveCountdown && !showWaveText) {
      waves[currentWaveIndex].update(16);
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–ª–Ω–µ
  if (waves[currentWaveIndex]?.finished && enemies.length === 0) {
    currentWaveIndex++;
    waveStarted = false;
  
    // –°–±—Ä–æ—Å –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–æ–ª–Ω—ã
    showWaveText = false;
    waveCountdown = null;
    countdownValue = 3;
  
    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ª–Ω—ã –Ω–∞ "–Ω–µ –Ω–∞—á–∞–ª–∞—Å—å"
    if (waves[currentWaveIndex]) {
      waves[currentWaveIndex].finished = false;
      waves[currentWaveIndex].spawned = 0;
      waves[currentWaveIndex].timer = 0;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–∏–ª–æ—Ç
  if (isAutopilot && performance.now() >= autopilotEndTime) {
    isAutopilot = false;
    isShooting = false; // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–µ–ª—å–±—É
    console.log("–ê–≤—Ç–æ–ø–∏–ª–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!");
  }

  // –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç –≤–∫–ª—é—á—ë–Ω ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º handleAutopilot()
  if (isAutopilot) {
    handleAutopilot();
  }

}

// ================== –û–¢–†–ò–°–û–í–ö–ê ===================
function draw() {
  ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);

  // –†–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å
  player.draw();

  // –ü—É–ª–∏
  bullets.forEach(bullet => {
    ctx.fillStyle = bullet.color;
    ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
  });

  // –í—Ä–∞–≥–∏
  enemies.forEach(enemy => enemy.draw());

  // –í–∑—Ä—ã–≤—ã
  explosions.forEach(exp => {
    ctx.beginPath();
    ctx.arc(exp.x, exp.y, exp.radius, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(255, 255, 0, ${exp.alpha})`;
    ctx.fill();
  });

  // –°—á—ë—Ç –º–æ–Ω–µ—Ç
  ctx.fillStyle = "gold";
  ctx.font = "20px Arial";
  ctx.textAlign = "right";
  ctx.fillText(`–ú–æ–Ω–µ—Ç—ã: ${coins}`, canvas.width - 20, 30);

  // –ö–æ–ª-–≤–æ —É–±–∏—Ç—ã—Ö –≤—Ä–∞–≥–æ–≤ ‚Äî –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
  ctx.fillStyle = "white";
  ctx.font = "20px Arial";
  ctx.textAlign = "left";
  ctx.fillText(`–£–±–∏—Ç–æ: ${killedEnemies}`, 20, 30);

  // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—Ä–∞–≥–∏ ‚Äî –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ª–Ω 2 –∏ 3)
  if (currentWaveIndex === 1 || currentWaveIndex === 2) {
    const wave = waves[currentWaveIndex];
    const remaining = wave ? (wave.enemyCount - wave.spawned + enemies.length) : 0;

    ctx.fillStyle = "white";
    ctx.font = "18px Arial";
    ctx.textAlign = "right";
    ctx.fillText(`–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–∞–≥–æ–≤: ${remaining}`, canvas.width - 20, canvas.height - 20);
  }

  // –ò–º—è –≤–æ–ª–Ω—ã + –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—Ä–∞–≥–∏
  if (waves[currentWaveIndex]) {
    const wave = waves[currentWaveIndex];
    const remaining = wave.enemyCount - wave.spawned + enemies.length;

    ctx.fillStyle = "white";
    ctx.font = "20px Arial";
    ctx.textAlign = "center";
    ctx.fillText(`${wave.name} ‚Äî –û—Å—Ç–∞–ª–æ—Å—å: ${remaining}`, canvas.width / 2, 30);
  }

  // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞ ‚Äî –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ª–Ω—ã
  if (waveCountdown || showWaveText) {
    ctx.fillStyle = "white";
    ctx.font = "60px Arial";
    ctx.textAlign = "center";

    if (waveCountdown) {
      ctx.fillText(`${countdownValue}`, canvas.width / 2, canvas.height / 2);
    } else if (showWaveText && waves[currentWaveIndex]) {
      ctx.fillText(`–í–û–õ–ù–ê ${currentWaveIndex + 1}`, canvas.width / 2, canvas.height / 2);
    }
  }
}

function activateAutopilot() {
  // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
  isAutopilot = true;
  autopilotEndTime = performance.now() + 10000;
  console.log("–ê–≤—Ç–æ–ø–∏–ª–æ—Ç –≤–∫–ª—é—á—ë–Ω –Ω–∞ 10 —Å–µ–∫!");
}

function handleAutopilot() {
  // –ò—â–µ–º –≤—Ä–∞–≥–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º y (—Å–∞–º–æ–≥–æ –Ω–∏–∑–∫–æ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
  if (enemies.length === 0) {
    // –ù–µ—Ç –≤—Ä–∞–≥–æ–≤ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–∏–ª–∏ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π)
    return;
  }

  let lowestEnemy = enemies[0];
  for (let i = 1; i < enemies.length; i++) {
    if (enemies[i].y > lowestEnemy.y) {
      lowestEnemy = enemies[i];
    }
  }

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X, –∫—É–¥–∞ —Ü–µ–ª–∏–º—Å—è ‚Äî —Ü–µ–Ω—Ç—Ä –≤—Ä–∞–≥–∞
  const targetX = lowestEnemy.x + lowestEnemy.width / 2;
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –∏–≥—Ä–æ–∫–∞
  const playerCenterX = player.x + player.width / 2;
  
  // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ª–µ–≤–µ–µ —Ü–µ–ª–∏, –¥–≤–∏–≥–∞–µ–º –≤–ø—Ä–∞–≤–æ
  if (playerCenterX < targetX - (player.speed/2 - 1)) {
    player.x += player.speed; 
  } 
  // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–∞–≤–µ–µ, –¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ
  else if (playerCenterX > targetX + (player.speed/2 + 1)) {
    player.x -= player.speed;
  }

  // –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–µ–ª—å–±—É, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å—Ç—Ä–µ–ª—è–ª
  if (!isShooting) {
    isShooting = true;
    if (!shootInterval) {
      shoot(); // —Å—Ä–∞–∑—É –≤—ã—Å—Ç—Ä–µ–ª
      shootInterval = setInterval(shoot, fireRate);
    }
  }
}



// ================== –ò–ì–†–û–í–û–ô –¶–ò–ö–õ ===================
function gameLoop() {
  update();
  draw();
  requestAnimationFrame(gameLoop);
}

updateUpgradeUI();
window.focus();
gameLoop();
